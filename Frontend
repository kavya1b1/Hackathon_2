import React, { useState, useEffect, useMemo } from 'react';
import { Search, Filter, Download, Eye, Network, Phone, Globe, Clock, Shield, AlertTriangle, BarChart3, Users, MapPin, Activity } from 'lucide-react';

const IPDRDashboard = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [filterType, setFilterType] = useState('all');
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [activeTab, setActiveTab] = useState('overview');

  // Sample data based on the provided IPDR structure
  const sampleData = [
    {
      privateIP: '157.239.93.101',
      privatePort: 17132,
      publicIP: '184.24.238.120',
      publicPort: 1411,
      destIP: '42.251.129.216',
      destPort: 56625,
      phoneNumber: '9199236069',
      imei: '642412510375893',
      imsi: '374493327798609',
      startTime: '2020-03-09 21:02:41',
      endTime: '2020-03-09 22:32:24',
      originCellID: '40440-31032-13713',
      originLat: 12.921981811523,
      originLong: 80.147323608398,
      uplinkVolume: 353,
      downlinkVolume: 127,
      totalVolume: 480,
      accessType: '3G'
    },
    {
      privateIP: '156.41.85.123',
      privatePort: 23059,
      publicIP: '164.125.149.231',
      publicPort: 8111,
      destIP: '224.56.128.160',
      destPort: 6172,
      phoneNumber: '9832889571',
      imei: '359304397565667',
      imsi: '811607902436372',
      startTime: '2020-01-03 17:39:15',
      endTime: '2020-01-03 18:14:45',
      originCellID: '40440-3100-16276',
      originLat: 13.064804077148,
      originLong: 80.161056518555,
      uplinkVolume: 644,
      downlinkVolume: 610,
      totalVolume: 1254,
      accessType: '4G'
    },
    {
      privateIP: '99.162.82.1',
      privatePort: 13448,
      publicIP: '95.93.130.28',
      publicPort: 19953,
      destIP: '80.248.74.133',
      destPort: 58351,
      phoneNumber: '9989334477',
      imei: '189347550324464',
      imsi: '677145529980659',
      startTime: '2020-04-11 17:05:27',
      endTime: '2020-04-11 18:29:38',
      originCellID: '40440-31012-6677672',
      originLat: 13.036161,
      originLong: 80.239334,
      uplinkVolume: 758,
      downlinkVolume: 404,
      totalVolume: 1162,
      accessType: '4G'
    },
    {
      privateIP: '89.241.249.43',
      privatePort: 9848,
      publicIP: '2.89.49.54',
      publicPort: 39943,
      destIP: '116.125.65.170',
      destPort: 30909,
      phoneNumber: '9696122597',
      imei: '593833258196172',
      imsi: '978920129547797',
      startTime: '2020-03-25 17:30:19',
      endTime: '2020-03-25 17:34:18',
      originCellID: '40440-5009-901',
      originLat: 13.009554,
      originLong: 80.208178,
      uplinkVolume: 481,
      downlinkVolume: 74,
      totalVolume: 555,
      accessType: '4G'
    }
  ];

  // Calculate session duration
  const getSessionDuration = (start, end) => {
    const startTime = new Date(start);
    const endTime = new Date(end);
    const duration = (endTime - startTime) / (1000 * 60); // in minutes
    return Math.round(duration);
  };

  // Filter data based on search and filters
  const filteredData = useMemo(() => {
    return sampleData.filter(record => {
      const matchesSearch = !searchTerm || 
        record.phoneNumber.includes(searchTerm) ||
        record.publicIP.includes(searchTerm) ||
        record.destIP.includes(searchTerm) ||
        record.imei.includes(searchTerm);
      
      const matchesFilter = filterType === 'all' || record.accessType === filterType;
      
      return matchesSearch && matchesFilter;
    });
  }, [searchTerm, filterType]);

  // Calculate statistics
  const stats = useMemo(() => {
    const totalRecords = filteredData.length;
    const uniqueNumbers = new Set(filteredData.map(r => r.phoneNumber)).size;
    const uniqueIPs = new Set(filteredData.map(r => r.publicIP)).size;
    const totalVolume = filteredData.reduce((sum, r) => sum + r.totalVolume, 0);
    
    return { totalRecords, uniqueNumbers, uniqueIPs, totalVolume };
  }, [filteredData]);

  const StatCard = ({ icon: Icon, title, value, subtitle, color = "blue" }) => (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow`}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className={`text-3xl font-bold text-${color}-600 mt-1`}>{value}</p>
          {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
        </div>
        <div className={`p-3 bg-${color}-50 rounded-lg`}>
          <Icon className={`h-6 w-6 text-${color}-600`} />
        </div>
      </div>
    </div>
  );

  const RecordModal = ({ record, onClose }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">Communication Record Details</h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Phone className="h-5 w-5 mr-2 text-blue-600" />
                Device Information
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <div><span className="font-medium">Phone Number:</span> {record.phoneNumber}</div>
                <div><span className="font-medium">IMEI:</span> {record.imei}</div>
                <div><span className="font-medium">IMSI:</span> {record.imsi}</div>
                <div><span className="font-medium">Access Type:</span> 
                  <span className={`ml-2 px-2 py-1 rounded text-xs font-medium ${
                    record.accessType === '4G' ? 'bg-green-100 text-green-800' :
                    record.accessType === '3G' ? 'bg-blue-100 text-blue-800' :
                    'bg-yellow-100 text-yellow-800'
                  }`}>{record.accessType}</span>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Globe className="h-5 w-5 mr-2 text-green-600" />
                Network Information
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <div><span className="font-medium">Private IP:</span> {record.privateIP}:{record.privatePort}</div>
                <div><span className="font-medium">Public IP:</span> {record.publicIP}:{record.publicPort}</div>
                <div><span className="font-medium">Destination IP:</span> {record.destIP}:{record.destPort}</div>
                <div><span className="font-medium">Cell ID:</span> {record.originCellID}</div>
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <MapPin className="h-5 w-5 mr-2 text-red-600" />
                Location Data
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <div><span className="font-medium">Latitude:</span> {record.originLat}</div>
                <div><span className="font-medium">Longitude:</span> {record.originLong}</div>
                <div><span className="font-medium">Cell Tower:</span> {record.originCellID}</div>
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Activity className="h-5 w-5 mr-2 text-purple-600" />
                Session Details
              </h3>
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <div><span className="font-medium">Start Time:</span> {record.startTime}</div>
                <div><span className="font-medium">End Time:</span> {record.endTime}</div>
                <div><span className="font-medium">Duration:</span> {getSessionDuration(record.startTime, record.endTime)} minutes</div>
                <div><span className="font-medium">Total Volume:</span> {record.totalVolume} MB</div>
                <div><span className="font-medium">Uplink:</span> {record.uplinkVolume} MB</div>
                <div><span className="font-medium">Downlink:</span> {record.downlinkVolume} MB</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Shield className="h-8 w-8 text-blue-600" />
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">IPDR Analysis System</h1>
                  <p className="text-sm text-gray-500">Law Enforcement Investigation Tool</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                <Download className="h-4 w-4" />
                <span>Export Data</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="max-w-7xl mx-auto px-6 py-4">
        <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg w-fit">
          {[
            { id: 'overview', label: 'Overview', icon: BarChart3 },
            { id: 'records', label: 'Records', icon: Users },
            { id: 'network', label: 'Network Map', icon: Network },
            { id: 'alerts', label: 'Alerts', icon: AlertTriangle }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-md font-medium transition-colors ${
                activeTab === tab.id
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <tab.icon className="h-4 w-4" />
              <span>{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 pb-8">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Statistics Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <StatCard
                icon={Users}
                title="Total Records"
                value={stats.totalRecords}
                subtitle="Communication sessions"
                color="blue"
              />
              <StatCard
                icon={Phone}
                title="Unique Numbers"
                value={stats.uniqueNumbers}
                subtitle="Mobile devices tracked"
                color="green"
              />
              <StatCard
                icon={Globe}
                title="Unique IPs"
                value={stats.uniqueIPs}
                subtitle="Public IP addresses"
                color="purple"
              />
              <StatCard
                icon={Activity}
                title="Total Volume"
                value={`${stats.totalVolume} MB`}
                subtitle="Data transferred"
                color="orange"
              />
            </div>

            {/* Search and Filters */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="text"
                    placeholder="Search by phone number, IP, or IMEI..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div className="flex gap-4">
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Types</option>
                    <option value="4G">4G</option>
                    <option value="3G">3G</option>
                    <option value="2G">2G</option>
                  </select>
                  <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                    <Filter className="h-4 w-4" />
                    <span>More Filters</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'records' && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="text"
                    placeholder="Search by phone number, IP, or IMEI..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <div className="flex gap-4">
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Types</option>
                    <option value="4G">4G</option>
                    <option value="3G">3G</option>
                    <option value="2G">2G</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Records Table */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Phone Number</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Public IP</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Destination</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Duration</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Volume</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Type</th>
                      <th className="text-left py-3 px-4 font-medium text-gray-700">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((record, index) => (
                      <tr key={index} className="border-t hover:bg-gray-50">
                        <td className="py-3 px-4 font-mono text-sm">{record.phoneNumber}</td>
                        <td className="py-3 px-4 font-mono text-sm">{record.publicIP}</td>
                        <td className="py-3 px-4 font-mono text-sm">{record.destIP}</td>
                        <td className="py-3 px-4 text-sm">{getSessionDuration(record.startTime, record.endTime)} min</td>
                        <td className="py-3 px-4 text-sm">{record.totalVolume} MB</td>
                        <td className="py-3 px-4">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            record.accessType === '4G' ? 'bg-green-100 text-green-800' :
                            record.accessType === '3G' ? 'bg-blue-100 text-blue-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {record.accessType}
                          </span>
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => setSelectedRecord(record)}
                            className="flex items-center space-x-1 text-blue-600 hover:text-blue-800 font-medium text-sm"
                          >
                            <Eye className="h-4 w-4" />
                            <span>View</span>
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'network' && (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="text-center py-20">
              <Network className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Network Visualization</h3>
              <p className="text-gray-500">Interactive network mapping will be displayed here</p>
              <p className="text-sm text-gray-400 mt-2">Connect to backend API to load network topology</p>
            </div>
          </div>
        )}

        {activeTab === 'alerts' && (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="text-center py-20">
              <AlertTriangle className="h-16 w-16 text-yellow-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Suspicious Activity Alerts</h3>
              <p className="text-gray-500">AI-powered anomaly detection results will appear here</p>
              <p className="text-sm text-gray-400 mt-2">Pattern analysis and automated flagging system</p>
            </div>
          </div>
        )}
      </div>

      {/* Record Detail Modal */}
      {selectedRecord && (
        <RecordModal
          record={selectedRecord}
          onClose={() => setSelectedRecord(null)}
        />
      )}
    </div>
  );
};

export default IPDRDashboard;
